services:
  keycloak:
    image: jboss/keycloak
    container_name: keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres321
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin123
      KEYCLOAK_LOGLEVEL: INFO
      PROXY_ADDRESS_FORWARDING: 'true'
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
    ports:
      - 8080:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - postgres
    networks:
      - goalification
  postgres:
    image: postgres:alpine
    container_name: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres321
    ports:
      - 5432:5432
    healthcheck:
      test: [ 'CMD-SHELL', 'psql postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@localhost:5432/$${POSTGRES_DB} || exit 1' ]
    networks:
      - goalification
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - postgres_data:/var/lib/postgresql/data
#      - .deploy/postgres/scripts/create_databases.sh:/docker-entrypoint-initdb.d/10-create_databases.sh:ro
  angular:
    build:
      context: ./
      dockerfile: ./Dockerfile.angular
      args:
        project: ui
    ports:
      - 8000:8000
    restart: on-failure
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - goalification
    volumes:
      - angular_vol:/usr/src/ui/
      - node_modules:/usr/src/ui/node_modules/
  nest:
    build:
      context: ./
      dockerfile: ./Dockerfile.nest
      args:
        project: api
    ports:
      - 3333:3333
    restart: on-failure
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      DB_HOST: postgres
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres321
      DB_PORT: 5432
      KEYCLOAK_SECRET: Vt8mkFsAXoJPzRDpzKwEIQELdOaBx4Cb
    depends_on:
      - postgres
    networks:
      - goalification
    volumes:
      - nest_vol:/usr/src/api/
      - node_modules:/usr/src/api/node_modules/
  prometheus:
    image: prom/prometheus:latest
    networks:
      - goalification
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
  grafana:
    image: grafana/grafana:latest
    networks:
      - goalification
    extra_hosts:
      - "host.docker.internal:host-gateway"
    container_name: monitoring_grafana
    restart: unless-stopped
    links:
      - prometheus:prometheus
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=12345
    ports:
      - 3000:3000
#  proxy:
#    image: nginx:alpine
#    depends_on:
#      - keycloak
#      - nest
#      - angular
#    ports:
#      - 80:80
##      - 443:443
#    networks:
#      - goalification
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
#    volumes:
#      - type: bind
#        source: ./proxy/nginx.proxy.conf
#        target: /etc/nginx/conf.d/default.conf
#      - type: bind
#        source: ./proxy/app.crt
#        target: /etc/ssl/certs/app.crt
#      - type: bind
#        source: ./proxy/app.key
#        target: /etc/ssl/private/app.key

volumes:
  angular_vol:
  nest_vol:
  node_modules:
  postgres_data:

networks:
  goalification:
    driver: bridge
